#! /bin/bash
#
#   Bindle Binaries Admin Tools
#   Copyright (C) 2014, 2017 Bindle Binaries <syzdek@bindlebinaries.com>.
#
#   @BINDLE_BINARIES_BSD_LICENSE_START@
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#      * Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#      * Neither the name of Bindle Binaries nor the
#        names of its contributors may be used to endorse or promote products
#        derived from this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#   IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BINDLE BINARIES BE LIABLE FOR
#   ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#   OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.
#
#   @BINDLE_BINARIES_BSD_LICENSE_END@
#

###########
# LOGGING #
###########

# sets script/package information
PROGRAM_NAME=$(basename ${0})
PACKAGE_NAME=$(echo '@PACKAGE_NAME@' |sed -e 's/[@].*[@]//g')
PACKAGE_VERSION=$(echo '@PACKAGE_VERSION@' |sed -e 's/[@].*[@]//g')
PACKAGE_BUGREPORT=$(echo '@PACKAGE_BUGREPORT@' |sed -e 's/[@].*[@]//g')


# If possible, log events in /var/log/messages:
PROG=rc.inet1_local
if [ -f /var/run/syslogd.pid -a -x /usr/bin/logger ]; then
  LOGGER="/usr/bin/logger -s -t ${PROG}[$$]"
else # output to stdout/stderr:
  LOGGER="/usr/bin/sed -e s/^/${PROG}:/g"
fi


print_down() { /usr/bin/printf "setting %-13s%s down\n" "${1}"; };
print_up()   { /usr/bin/printf "setting %-13s%s up\n"   "${1}"; };


#############
# FUNCTIONS #
#############

# Function to start the network:
start()
{
   # Load Kernel Modules
   echo "loading modules..."
   /sbin/modprobe ipv6    > /dev/null 2>&1
   /sbin/modprobe 8021q   > /dev/null 2>&1


   # Interface: lo
   print_up "lo"
   /usr/sbin/ip link set lo up              > /dev/null 2>&1
   /usr/sbin/ip addr add 127.0.0.1/8 dev lo > /dev/null 2>&1
   /usr/sbin/ip addr add ::1         dev lo > /dev/null 2>&1

   # load local rules
   if test -f /etc/rc.d/rc.inet1_local_up;then
      . /etc/rc.d/rc.inet1_local_up
   fi
}


list_links()
{
   test -z "${1}" && return 0
   TYPE="${1}"
   /usr/sbin/ip -br link show type ${TYPE} \
      |awk '{print$1}' \
      |cut -d@ -f1 \
      |sort -n
}


# Function to stop the network:
stop()
{
   # load local rules
   if test -f /etc/rc.d/rc.inet1_local_down;then
      . /etc/rc.d/rc.inet1_local_down
   fi

   # disabling forwarding
   echo "disabling forwarding..."
   echo 0 > /proc/sys/net/ipv4/ip_forward
   echo 0 >  /proc/sys/net/ipv6/conf/all/forwarding


   # Routes
   echo "removing routes..."
   /usr/sbin/ip -6 route flush all
   /usr/sbin/ip -4 route flush all


   # delete interfaces
   for NETTYPE in vlan ipvlan macvlan macvtap bond;do
      for NETDEV in $(list_links ${NETTYPE});do
         print_down "${NETDEV}"
         /usr/sbin/ip -4 addr flush dev ${NETDEV}
         /usr/sbin/ip -6 addr flush dev ${NETDEV}
         /usr/sbin/ip link set ${NETDEV} down > /dev/null
         /usr/sbin/ip link del dev ${NETDEV} type ${NETTYPE}
      done
   done


   # delete vrfs
   for NETDEV in $(list_links vrf);do
      print_down "${NETDEV}"
      TABLE=$(/usr/sbin/ip -d link show ${NETDEV} type vrf |grep 'vrf table' |awk '{print$3}')
      /usr/sbin/ip link del dev ${NETDEV} type vrf
      /usr/sbin/ip route flush table ${TABLE}
   done


   # delete tunnels
   for NETDEV in $(/usr/sbin/ip tunnel show |cut -d: -f1);do
      print_down "${NETDEV}"
      /usr/sbin/ip -4 addr flush dev ${NETDEV}
      /usr/sbin/ip -6 addr flush dev ${NETDEV}
      /usr/sbin/ip    link set   dev ${NETDEV} down
      /usr/sbin/ip    tun  del       ${NETDEV}
   done


   # down all network interfaces
   for NETDEV in $(cut -d: -f1 /proc/net/dev |egrep  'eth' |sort) lo;do
      print_down "${NETDEV}"
      /usr/sbin/ip -4 addr flush dev ${NETDEV}
      /usr/sbin/ip -6 addr flush dev ${NETDEV}
      /usr/sbin/ip    link set   dev ${NETDEV} down
   done


   # Interface: lo
   print_up "lo"
   /usr/sbin/ip link set lo up              > /dev/null 2>&1
   /usr/sbin/ip addr add 127.0.0.1/8 dev lo > /dev/null 2>&1
   /usr/sbin/ip addr add ::1         dev lo > /dev/null 2>&1


   # removes modules
   echo "unloading modules..."
   /sbin/modprobe -r 8021q   > /dev/null 2>&1
   /sbin/modprobe -r bonding > /dev/null 2>&1
   /sbin/modprobe -r sit     > /dev/null 2>&1
}


############
### MAIN ###
############

echo "${PACKAGE_NAME} ${PACKAGE_VERSION}" | $LOGGER 2>&1
case "$1" in
   'start') # "start" brings up all configured interfaces:
   start 2>&1 | $LOGGER
   ;;

   'stop') # "stop" takes down all configured interfaces:
   stop 2>&1 | $LOGGER
   ;;

   'restart') # "restart" restarts the network:
   stop 2>&1 | $LOGGER
   sleep 2
   start 2>&1 | $LOGGER
   exit 0
   ;;

   *) # The default is to bring up all configured interfaces:
   start 2>&1 | $LOGGER
   ;;
esac


# End of /etc/rc.d/rc.inet1
