#!/bin/sh
#
#   Bindle Binaries Admin Tools
#   Copyright (C) 2014 Bindle Binaries <syzdek@bindlebinaries.com>.
#
#   @BINDLE_BINARIES_BSD_LICENSE_START@
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#      * Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#      * Neither the name of Bindle Binaries nor the
#        names of its contributors may be used to endorse or promote products
#        derived from this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#   IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BINDLE BINARIES BE LIABLE FOR
#   ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#   OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.
#
#   @BINDLE_BINARIES_BSD_LICENSE_END@
#
#   rc.firewall            - Firewall init script for Slackware
#   rc.firewall.ipsets     - IP sets host specific used by iptables/ip6tables
#   rc.firewall.global     - IPv4/IPv6 global rules which are centrally maintained
#   rc.firewall.global4    - IPv4 global rules which are centrally maintained
#   rc.firewall.global6    - IPv6 global rules which are centrally maintained
#   rc.firewall.globalsets - global IP sets which are centrally maintained
#   rc.firewall.rules      - IPv4/IPv6 host specific firewall rules
#   rc.firewall.rules4     - IPv4 host specific firewall rules
#   rc.firewall.rules6     - IPv6 host specific firewall rules
#
#   Firewall rules are loaded in the following order:
#      rc.firewall.globalsets
#      rc.firewall.ipsets
#      rc.firewall.rules4
#      rc.firewall.rules6
#      rc.firewall.rules
#      rc.firewall.global4
#      rc.firewall.global6
#      rc.firewall.global
#      rc.firewall.globalsets
#

###########
# LOGGING #
###########

# sets script/package information
PROGRAM_NAME="$(basename ${0})"
PACKAGE_NAME="$(echo '@PACKAGE_NAME@' |sed -e 's/[@].*[@]//g')"
PACKAGE_VERSION="$(echo '@PACKAGE_VERSION@' |sed -e 's/[@].*[@]//g')"
PACKAGE_BUGREPORT="$(echo '@PACKAGE_BUGREPORT@' |sed -e 's/[@].*[@]//g')"


# If possible, log events in /var/log/messages:
PROG=rc.firewall
if [ -f /var/run/syslogd.pid -a -x /usr/bin/logger ]; then
  LOGGER="/usr/bin/logger -s -t ${PROG}[$$]"
else # output to stdout/stderr:
  LOGGER="/usr/bin/sed -e s/^/${PROG}:/g"
fi


#############
# FUNCTIONS #
#############

clean_file()
{
   DIRTY_FILE="${1}"
   /usr/bin/cut -d# -f1 "${DIRTY_FILE}" \
      |sed -n 'H; ${ x; s/\\\n//; s/\n //g; p}' \
      |sed -e 's/[[:space:]]{1,}/ /g'
}


dump()
{
   /usr/sbin/ipset list |sed -e "s/^/ipset: /g"
   echo ""
   for TABLE in $(/usr/sbin/iptables-save  |grep '^*' |sed -e 's/^*//g' |sort);do
      PREFIX="$(printf "%-9s" "${TABLE}:")"
      /usr/sbin/iptables -t ${TABLE} -L |sed -e "s/^/iptables ${PREFIX} /g"
      echo ""
   done
   for TABLE in $(/usr/sbin/ip6tables-save  |grep '^*' |sed -e 's/^*//g' |sort);do
      PREFIX="$(printf "%-9s" "${TABLE}:")"
      /usr/sbin/ip6tables -t ${TABLE} -L |sed -e "s/^/ip6tables ${PREFIX} /g"
      echo ""
   done
}


# Function to start the network:
start() {
   # create IP sets
   if test -f /etc/rc.d/rc.firewall.globalsets;then
      echo "adding global IP sets"
      clean_file /etc/rc.d/rc.firewall.globalsets |/usr/sbin/ipset restore
   fi
   if test -f /etc/rc.d/rc.firewall.ipsets;then
      echo "adding local IP sets"
      clean_file /etc/rc.d/rc.firewall.ipsets |/usr/sbin/ipset restore
   fi

   # apply host specific firewall rules
   if test -f /etc/rc.d/rc.firewall.rules4;then
      echo "adding IPv4 local rules"
      clean_file /etc/rc.d/rc.firewall.rules4 |/usr/sbin/iptables-restore -n
   fi
   if test -f /etc/rc.d/rc.firewall.rules6;then
      echo "adding IPv6 local rules"
      clean_file /etc/rc.d/rc.firewall.rules6 |/usr/sbin/ip6tables-restore -n
   fi
   if test -f /etc/rc.d/rc.firewall.rules;then
      echo "adding IPv4/IPv6 local rules"
      clean_file /etc/rc.d/rc.firewall.rules |/usr/sbin/iptables-restore  -n
      clean_file /etc/rc.d/rc.firewall.rules |/usr/sbin/ip6tables-restore -n
   fi

   # apply company policy for firewall rules
   if test -f /etc/rc.d/rc.firewall.global4;then
      echo "adding IPv4 global rules"
      clean_file /etc/rc.d/rc.firewall.global4 |/usr/sbin/iptables-restore -n
   fi
   if test -f /etc/rc.d/rc.firewall.global6;then
      echo "adding IPv6 global rules"
      clean_file /etc/rc.d/rc.firewall.global6 |/usr/sbin/ip6tables-restore -n
   fi
   if test -f /etc/rc.d/rc.firewall.global;then
      echo "adding IPv4/IPv6 global rules"
      clean_file /etc/rc.d/rc.firewall.global |/usr/sbin/iptables-restore  -n
      clean_file /etc/rc.d/rc.firewall.global |/usr/sbin/ip6tables-restore -n
   fi

   # Application rules
   if test -d /etc/firewall.d;then
      for FILE in $(find /etc/firewall.d/ -name '*.ipsets' -type f);do
         echo "adding IP sets (App: $(basename ${FILE})) ..."
         clean_file ${FILE} |/usr/sbin/ipset retore
      done
      for FILE in $(find /etc/firewall.d/ -name '*.rules4' -type f);do
         echo "adding IPv4 rules (App: $(basename ${FILE})) ..."
         clean_file ${FILE} |/usr/sbin/iptables-restore -n
      done
      for FILE in $(find /etc/firewall.d/ -name '*.rules6' -type f);do
         echo "adding IPv6 rules (App: $(basename ${FILE})) ..."
         clean_file ${FILE} |/usr/sbin/ip6tables-restore -n
      done
      for FILE in $(find /etc/firewall.d/ -name '*.rules' -type f);do
         echo "adding IPv4/IPv6 rules (App: $(basename ${FILE})) ..."
         clean_file ${FILE} |/usr/sbin/ip6tables-restore -n
      done
   fi


   # LXC rules
   if test -d /var/lib/lxc/;then
      for LXC in `ls /var/lib/lxc/`;do
         if test -f /var/lib/lxc/${LXC}/rc.d/rc.firewall.rules4;then
            echo "adding IPv4 rules (LXC: ${LXC})"
            clean_file /var/lib/lxc/${LXC}/rc.d/rc.firewall.rules4 | /usr/sbin/iptables-restore -n
         fi
         if test -f /var/lib/lxc/${LXC}/rc.d/rc.firewall.rules6;then
            echo "adding IPv6 rules (LXC: ${LXC})"
            clean_file /var/lib/lxc/${LXC}/rc.d/rc.firewall.rules6 | /usr/sbin/ip6tables-restore -n
         fi
         if test -f /var/lib/lxc/${LXC}/rc.d/rc.firewall.rules;then
            echo "adding IPv4/IPv6 rules (LXC: ${LXC})"
            clean_file /var/lib/lxc/${LXC}/rc.d/rc.firewall.rules | /usr/sbin/iptables-restore  -n
            clean_file /var/lib/lxc/${LXC}/rc.d/rc.firewall.rules | /usr/sbin/ip6tables-restore -n
         fi
      done
   fi
}


# Function to stop the network:
stop() {
   for TABLE in $(/usr/sbin/iptables-save  |grep '^*' |sed -e 's/^*//g' |sort);do
      echo "Flushing rules from ${TABLE} table (IPv4)"
      for CHAIN in $(/usr/sbin/iptables-save -t ${TABLE} |grep '^:' |cut -d: -f2 |grep -v ' - ' |cut -d\  -f1);do
         /usr/sbin/iptables -t ${TABLE} -P ${CHAIN} ACCEPT
      done
      /usr/sbin/iptables -t ${TABLE} -F
      for CHAIN in $(/usr/sbin/iptables-save -t ${TABLE} |grep '^:' |cut -d: -f2 |grep ' - ' |cut -d\  -f1);do
         /usr/sbin/iptables -t ${TABLE} -X ${CHAIN}
      done
   done 2> /dev/null

   for TABLE in $(/usr/sbin/iptables-save  |grep '^*' |sed -e 's/^*//g' |sort);do
      echo "Flushing rules from ${TABLE} table (IPv6)"
      for CHAIN in $(/usr/sbin/ip6tables-save -t ${TABLE} |grep '^:' |cut -d: -f2 |grep -v ' - ' |cut -d\  -f1);do
         /usr/sbin/ip6tables -t ${TABLE} -P ${CHAIN} ACCEPT
      done
      /usr/sbin/ip6tables -t ${TABLE} -F
      for CHAIN in $(/usr/sbin/ip6tables-save -t ${TABLE} |grep '^:' |cut -d: -f2 |grep ' - ' |cut -d\  -f1);do
         /usr/sbin/ip6tables -t ${TABLE} -X ${CHAIN}
      done
   done 2> /dev/null

   echo "Destroying all IP sets ..."
   for SET in $(/usr/sbin/ipset save |grep '^create' |grep ' list:' |awk '{print$2}');do
      /usr/sbin/ipset destroy "${SET}"
   done
   for SET in $(/usr/sbin/ipset save |grep '^create' |awk '{print$2}');do
      /usr/sbin/ipset destroy "${SET}"
   done
}


############
### MAIN ###
############

echo "${PACKAGE_NAME} ${PACKAGE_VERSION}" | $LOGGER 2>&1
case "$1" in
   'dump')
      dump
   ;;

   'start') # "start" brings up all configured interfaces:
      start 2>&1 | $LOGGER
   ;;

   'stop') # "stop" takes down all configured interfaces:
      stop  2>&1 | $LOGGER
   ;;

   'restart') # "restart" restarts the network:
      stop  2>&1 | $LOGGER
      start 2>&1 | $LOGGER
   ;;

   *) # The default is to bring up all configured interfaces:
     start  2>&1 | $LOGGER
   ;;
esac

# End of scripts
