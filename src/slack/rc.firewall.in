#!/bin/sh
#
#   Bindle Binaries Admin Tools
#   Copyright (C) 2014 Bindle Binaries <syzdek@bindlebinaries.com>.
#
#   @BINDLE_BINARIES_BSD_LICENSE_START@
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#      * Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#      * Neither the name of Bindle Binaries nor the
#        names of its contributors may be used to endorse or promote products
#        derived from this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#   IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BINDLE BINARIES BE LIABLE FOR
#   ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#   OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.
#
#   @BINDLE_BINARIES_BSD_LICENSE_END@
#
#   Possible locations for firewall script:
#
#      /etc/rc.d/rc.firewall  - slackware init script
#      /usr/sbin/firewall     - generic firewall script location
#
#   Files are processed in the following order:
#
#      /etc/firewall.d/global-pre      - centrally maintained pre-hook script
#      /etc/firewall.d/rules-pre       - host specific pre-hook script
#      /etc/firewall.d/apps.d/*.pre    - app pre-hook script
#
#      /etc/firewall.d/globalsets      - centrally maintained IP sets
#      /etc/firewall.d/ipsets          - host specific IP sets
#      /etc/firewall.d/apps.d/*.ipsets - app specific IP sets
#
#      /etc/firewall.d/global4         - centrally maintained IPv4 rules
#      /etc/firewall.d/global6         - centrally maintained IPv6 rules
#      /etc/firewall.d/global          - centrally maintained IPv4/IPv6 rules
#
#      /etc/firewall.d/rules4          - host specific IPv4 firewall rules
#      /etc/firewall.d/rules6          - host specific IPv6 firewall rules
#      /etc/firewall.d/rules           - host specific IPv4/IPv6 firewall rules
#
#      /etc/firewall.d/apps.d/*.rules4 - app specific IPv4 firewall rules
#      /etc/firewall.d/apps.d/*.rules6 - app specific IPv6 firewall rules
#      /etc/firewall.d/apps.d/*.rules  - app specific IPv4/IPv6 firewall rules
#
#      /etc/firewall.d/global-post     - centrally maintained post-hook script
#      /etc/firewall.d/rules-post      - host specific post-hook script
#      /etc/firewall.d/apps.d/*.post   - app post-hook script
#


###############
# ENVIRONMENT #
###############

PATH=/usr/bin:/bin:/usr/sbin:/sbin
export PATH


# determine prefix of conf files
if test -f /etc/rc.d/rc.firewall.global;then
   FW_PREFIX=/etc/rc.d/rc.firewall.
else
   FW_PREFIX=/etc/firewall.d/
fi


###########
# LOGGING #
###########

# sets script/package information
PROGRAM_NAME="$(basename ${0})"
PACKAGE_NAME="$(echo '@PACKAGE_NAME@' |sed -e 's/[@].*[@]//g')"
PACKAGE_VERSION="$(echo '@PACKAGE_VERSION@' |sed -e 's/[@].*[@]//g')"
PACKAGE_BUGREPORT="$(echo '@PACKAGE_BUGREPORT@' |sed -e 's/[@].*[@]//g')"


# If possible, log events in /var/log/messages:
PROG=rc.firewall
if [ -f /var/run/syslogd.pid -a -x logger ]; then
  LOGGER="logger -s -t ${PROG}[$$]"
else # output to stdout/stderr:
  LOGGER="sed -e s/^/${PROG}:/g"
fi


#############
# FUNCTIONS #
#############

clean_file()
{
   DIRTY_FILE="${1}"
   cut -d# -f1 "${DIRTY_FILE}" \
      |sed -n 'H; ${ x; s/\\\n//; s/\n //g; p}' \
      |sed -e 's/[[:space:]]{1,}/ /g'
}


dump()
{
   ipset list |sed -e "s/^/ipset: /g"
   echo ""
   for TABLE in $(iptables-save  |grep '^*' |sed -e 's/^*//g' |sort);do
      PREFIX="$(printf "%-9s" "${TABLE}:")"
      iptables -t ${TABLE} -L |sed -e "s/^/iptables ${PREFIX} /g"
      echo ""
   done
   for TABLE in $(ip6tables-save  |grep '^*' |sed -e 's/^*//g' |sort);do
      PREFIX="$(printf "%-9s" "${TABLE}:")"
      ip6tables -t ${TABLE} -L |sed -e "s/^/ip6tables ${PREFIX} /g"
      echo ""
   done
}


# Function to start the network:
start() {
   # create IP sets
   if test -f ${FW_PREFIX}globalsets;then
      echo "adding global IP sets"
      clean_file ${FW_PREFIX}globalsets |ipset restore
   fi
   if test -f ${FW_PREFIX}ipsets;then
      echo "adding local IP sets"
      clean_file ${FW_PREFIX}ipsets |ipset restore
   fi
   if test -d /etc/firewall.d/apps.d;then
      for FILE in $(find /etc/firewall.d/apps.d/ -name '*.ipsets' -type f);do
         echo "adding IP sets (App: $(basename ${FILE})) ..."
         clean_file ${FILE} |ipset retore
      done
   fi

   # apply host specific firewall rules
   if test -f ${FW_PREFIX}rules4;then
      echo "adding IPv4 local rules"
      clean_file ${FW_PREFIX}rules4 |iptables-restore -n
   fi
   if test -f ${FW_PREFIX}rules6;then
      echo "adding IPv6 local rules"
      clean_file ${FW_PREFIX}rules6 |ip6tables-restore -n
   fi
   if test -f ${FW_PREFIX}rules;then
      echo "adding IPv4/IPv6 local rules"
      clean_file ${FW_PREFIX}rules |iptables-restore  -n
      clean_file ${FW_PREFIX}rules |ip6tables-restore -n
   fi

   # apply company policy for firewall rules
   if test -f ${FW_PREFIX}global4;then
      echo "adding IPv4 global rules"
      clean_file ${FW_PREFIX}global4 |iptables-restore -n
   fi
   if test -f ${FW_PREFIX}global6;then
      echo "adding IPv6 global rules"
      clean_file ${FW_PREFIX}global6 |ip6tables-restore -n
   fi
   if test -f ${FW_PREFIX}global;then
      echo "adding IPv4/IPv6 global rules"
      clean_file ${FW_PREFIX}global |iptables-restore  -n
      clean_file ${FW_PREFIX}global |ip6tables-restore -n
   fi

   # Application rules
   if test -d /etc/firewall.d/apps.d;then
      for FILE in $(find /etc/firewall.d/apps.d/ -name '*.rules4' -type f);do
         echo "adding IPv4 rules (App: $(basename ${FILE})) ..."
         clean_file ${FILE} |iptables-restore -n
      done
      for FILE in $(find /etc/firewall.d/apps.d/ -name '*.rules6' -type f);do
         echo "adding IPv6 rules (App: $(basename ${FILE})) ..."
         clean_file ${FILE} |ip6tables-restore -n
      done
      for FILE in $(find /etc/firewall.d/apps.d/ -name '*.rules' -type f);do
         echo "adding IPv4/IPv6 rules (App: $(basename ${FILE})) ..."
         clean_file ${FILE} |ip6tables-restore -n
      done
   fi


   # LXC rules
   if test -d /var/lib/lxc/;then
      for LXC in `ls /var/lib/lxc/`;do
         if test -f /var/lib/lxc/${LXC}/rc.d/rc.firewall.rules4;then
            echo "adding IPv4 rules (LXC: ${LXC})"
            clean_file /var/lib/lxc/${LXC}/rc.d/rc.firewall.rules4 | iptables-restore -n
         fi
         if test -f /var/lib/lxc/${LXC}/rc.d/rc.firewall.rules6;then
            echo "adding IPv6 rules (LXC: ${LXC})"
            clean_file /var/lib/lxc/${LXC}/rc.d/rc.firewall.rules6 | ip6tables-restore -n
         fi
         if test -f /var/lib/lxc/${LXC}/rc.d/rc.firewall.rules;then
            echo "adding IPv4/IPv6 rules (LXC: ${LXC})"
            clean_file /var/lib/lxc/${LXC}/rc.d/rc.firewall.rules | iptables-restore  -n
            clean_file /var/lib/lxc/${LXC}/rc.d/rc.firewall.rules | ip6tables-restore -n
         fi
      done
   fi
}


# Function to stop the network:
stop() {
   for TABLE in $(iptables-save  |grep '^*' |sed -e 's/^*//g' |sort);do
      echo "Flushing rules from ${TABLE} table (IPv4)"
      for CHAIN in $(iptables-save -t ${TABLE} |grep '^:' |cut -d: -f2 |grep -v ' - ' |cut -d\  -f1);do
         iptables -t ${TABLE} -P ${CHAIN} ACCEPT
      done
      iptables -t ${TABLE} -F
      for CHAIN in $(iptables-save -t ${TABLE} |grep '^:' |cut -d: -f2 |grep ' - ' |cut -d\  -f1);do
         iptables -t ${TABLE} -X ${CHAIN}
      done
   done 2> /dev/null

   for TABLE in $(iptables-save  |grep '^*' |sed -e 's/^*//g' |sort);do
      echo "Flushing rules from ${TABLE} table (IPv6)"
      for CHAIN in $(ip6tables-save -t ${TABLE} |grep '^:' |cut -d: -f2 |grep -v ' - ' |cut -d\  -f1);do
         ip6tables -t ${TABLE} -P ${CHAIN} ACCEPT
      done
      ip6tables -t ${TABLE} -F
      for CHAIN in $(ip6tables-save -t ${TABLE} |grep '^:' |cut -d: -f2 |grep ' - ' |cut -d\  -f1);do
         ip6tables -t ${TABLE} -X ${CHAIN}
      done
   done 2> /dev/null

   echo "Destroying all IP sets ..."
   for SET in $(ipset save |grep '^create' |grep ' list:' |awk '{print$2}');do
      ipset destroy "${SET}"
   done
   for SET in $(ipset save |grep '^create' |awk '{print$2}');do
      ipset destroy "${SET}"
   done
}


############
### MAIN ###
############

echo "${PACKAGE_NAME} ${PACKAGE_VERSION}" | $LOGGER 2>&1
case "$1" in
   'dump')
      dump
   ;;

   'start') # "start" brings up all configured interfaces:
      start 2>&1 | $LOGGER
   ;;

   'stop') # "stop" takes down all configured interfaces:
      stop  2>&1 | $LOGGER
   ;;

   'restart') # "restart" restarts the network:
      stop  2>&1 | $LOGGER
      start 2>&1 | $LOGGER
   ;;

   *) # The default is to bring up all configured interfaces:
     start  2>&1 | $LOGGER
   ;;
esac

# End of scripts
