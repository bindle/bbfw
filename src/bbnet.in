#! /bin/bash
#
#   Bindle Binaries Admin Tools
#   Copyright (C) 2014, 2017, 2024 Bindle Binaries <syzdek@bindlebinaries.com>.
#
#   @BINDLE_BINARIES_BSD_LICENSE_START@
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#      * Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#      * Neither the name of Bindle Binaries nor the
#        names of its contributors may be used to endorse or promote products
#        derived from this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#   IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BINDLE BINARIES BE LIABLE FOR
#   ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#   OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.
#
#   @BINDLE_BINARIES_BSD_LICENSE_END@
#

###############
# ENVIRONMENT #
###############

PATH=/usr/bin:/bin:/usr/sbin:/sbin
export PATH


# determine prefix of conf files
NET_CONF=@sysconfdir@/bbnet.conf


NET_DIR=@sysconfdir@/network.d
NET_QUIET=no
NET_VERBOSE=no
NET_ORDER_PRE="builtin global apps cluster local"
NET_ORDER_POST="builtin global apps cluster local"
NET_ORDER_UP="builtin global apps cluster local"
NET_ORDER_DOWN="local cluster apps global builtin"
NET_ORDER_SYNC="cluster apps global"
NET_SYNC_PRIORITY="script git rsync"
NET_SYNC_RESTARTS=yes
NET_SYNC_TIMEOUT=60


NET_SYNC_DID_UPDATE=no
export NET_SYNC_DID_UPDATE


GIT_HTTP_LOW_SPEED_LIMIT=1000
GIT_HTTP_LOW_SPEED_TIME=5
export GIT_HTTP_LOW_SPEED_LIMIT
export GIT_HTTP_LOW_SPEED_TIME


###########
# LOGGING #
###########

# sets script/package information
PROGRAM_NAME="$(basename "${0}")"
PACKAGE_NAME="$(echo '@PACKAGE_NAME@' |sed -e 's/[@].*[@]//g')"
PACKAGE_VERSION="$(echo '@PACKAGE_VERSION@' |sed -e 's/[@].*[@]//g')"
PACKAGE_BUGREPORT="$(echo '@PACKAGE_BUGREPORT@' |sed -e 's/[@].*[@]//g')"


# If possible, log events in /var/log/messages:
if [ -f /var/run/syslogd.pid -a -x logger ]; then
  LOGGER="logger -s -t ${PROGRAM_NAME}[$$]"
else # output to stdout/stderr:
  LOGGER="sed -e s/^/${PROGRAM_NAME}:/g"
fi


#############
# FUNCTIONS #
#############

app_findfile()
{
   if test ! -d "${NET_DIR}/apps.d"; then
      return 0;
   fi
   find -L \
      ${NET_DIR}/apps.d/ \
      -mindepth 2 \
      -maxdepth 2 \
      -type f \
      -name "${1}" \
      2> /dev/null;
   return 0;
}


app_list()
{
   for APPDIR in $(app_listdir); do
      basename "${APPDIR}";
   done
   return;
}


app_listdir()
{
   if test ! -d "${NET_DIR}/apps.d"; then
      return 0;
   fi
   find -L \
      ${NET_DIR}/apps.d/ \
      -type d \
      -mindepth 1 \
      -maxdepth 1 \
      2> /dev/null \
      |sed -e 's:/\{1,\}$::g';
   return 0;
}


app_name()
{
   basename "$(dirname "${1}")"
}


config_check()
{
   if test ! -f "${NET_CONF}";then
      return 0;
   fi

   CONFIG_OK=yes

   {
      # check for duplicate options
      OPTS=""
      OPTS="${OPTS} network_dir"
      OPTS="${OPTS} order_down"
      OPTS="${OPTS} order_posthook"
      OPTS="${OPTS} order_prehook"
      OPTS="${OPTS} order_sync"
      OPTS="${OPTS} order_up"
      OPTS="${OPTS} quiet"
      OPTS="${OPTS} sync_priority"
      OPTS="${OPTS} sync_restarts"
      OPTS="${OPTS} sync_timeout"
      OPTS="${OPTS} verbose"
      for OPT in ${OPTS}; do
         config_option "${OPT}" > /dev/null
         if test ${?} -ne 0;then
         echo "config error: duplicate config entry for '${OPT}'"
            CONFIG_OK=no
         fi
      done

      # check boolean options
      OPTS=""
      OPTS="${OPTS} quiet"
      OPTS="${OPTS} sync_restarts"
      OPTS="${OPTS} verbose"
      for OPT in ${OPTS}; do
         config_option "${OPT}" |egrep -i '^yes$|^no$|^$' > /dev/null
         if test ${?} -ne 0;then
            echo "config error: invalid config value for '${OPT}'"
            CONFIG_OK=no
         fi
      done

      # check numeric options
      OPTS=""
      OPTS="${OPTS} sync_timeout"
      for OPT in ${OPTS}; do
         config_option "${OPT}" |egrep '^([0-9]{1,5}){0,1}$' > /dev/null
         if test ${?} -ne 0;then
            echo "config error: invalid config value for '${OPT}'"
            CONFIG_OK=no
         fi
      done

      # checks for network directory
      if test ! -d "${NET_DIR}";then
         echo "error: network directory not found or does not exist"
         CONFIG_OK=no
      fi

      # check order options
      OPTS=""
      OPTS="${OPTS} order_down"
      OPTS="${OPTS} order_posthook"
      OPTS="${OPTS} order_prehook"
      OPTS="${OPTS} order_sync"
      OPTS="${OPTS} order_up"
      for OPT in ${OPTS}; do
         TMP_APPS=0
         TMP_BUILTIN=0
         TMP_GLOBAL=0
         TMP_CLUSTER=0
         TMP_LOCAL=0
         TMP_NONE=0
         for VAL in $(config_option ${OPT} "builtin" A-Z a-z); do
            case "${VAL}" in
               apps)    TMP_APPS=$((${TMP_APPS}+1)) ;;
               builtin) TMP_BUILTIN=$((${TMP_BUILTIN}+1)) ;;
               global)  TMP_GLOBAL=$((${TMP_GLOBAL}+1)) ;;
               cluster) TMP_CLUSTER=$((${TMP_CLUSTER}+1)) ;;
               local)   TMP_LOCAL=$((${TMP_LOCAL}+1)) ;;
               none)    TMP_NONE=$((${TMP_NONE}+1)) ;;
               *)       echo "config error: unknown value '${VAL}' for order in '${OPT}'"
                        CONFIG_OK=no
                        ;;
            esac
         done
         if test ${TMP_APPS} -gt 1;then
            echo "config error: duplicate level 'apps' for order in '${OPT}'"
            CONFIG_OK=no
         fi
         if test ${TMP_BUILTIN} -gt 1;then
            echo "config error: duplicate level 'builtin' for order in '${OPT}'"
            CONFIG_OK=no
         fi
         if test ${TMP_GLOBAL} -gt 1;then
            echo "config error: duplicate level 'global' for order in '${OPT}'"
            CONFIG_OK=no
         fi
         if test ${TMP_CLUSTER} -gt 1;then
            echo "config error: duplicate level 'cluster' for order in '${OPT}'"
            CONFIG_OK=no
         fi
         if test ${TMP_LOCAL} -gt 1;then
            echo "config error: duplicate level 'local' for order in '${OPT}'"
            CONFIG_OK=no
         fi
         if test ${TMP_NONE} -gt 1;then
            echo "config error: duplicate level 'none' for order in '${OPT}'"
            CONFIG_OK=no
         fi
      done

      # check sync priority options
      OPTS=""
      OPTS="${OPTS} sync_priority"
      for OPT in ${OPTS}; do
         TMP_GIT=0
         TMP_NONE=0
         TMP_RSYNC=0
         TMP_SCRIPT=0
         for VAL in $(config_option ${OPT} "git" A-Z a-z); do
            case "${VAL}" in
               git)     TMP_GIT=$((${TMP_GIT}+1)) ;;
               none)    TMP_NONE=$((${TMP_NONE}+1)) ;;
               rsync)   TMP_RSYNC=$((${TMP_RSYNC}+1)) ;;
               script)  TMP_SCRIPT=$((${TMP_SCRIPT}+1)) ;;
               *)       echo "config error: unknown value '${VAL}' for priority in '${OPT}'"
                        CONFIG_OK=no
                        ;;
            esac
         done
         if test ${TMP_GIT} -gt 1;then
            echo "config error: duplicate priority 'git' in '${OPT}'"
            CONFIG_OK=no
         fi
         if test ${TMP_NONE} -gt 1;then
            echo "config error: duplicate priority 'none' in '${OPT}'"
            CONFIG_OK=no
         fi
         if test ${TMP_RSYNC} -gt 1;then
            echo "config error: duplicate priority 'rsync' in '${OPT}'"
            CONFIG_OK=no
         fi
         if test ${TMP_SCRIPT} -gt 1;then
            echo "config error: duplicate priority 'script' in '${OPT}'"
            CONFIG_OK=no
         fi
      done

   } 1>&2

   if test "x${CONFIG_OK}" == "xno";then
      return 1
   fi

   return 0
}


config_option()
{
   if test ! -f "${NET_CONF}";then
      echo "${2}" |tr "${3:-0}" "${4:-0}"
      return 0
   fi
   TMP_COUNT="$(
      egrep \
         -i \
         "^[[:space:]]{0,}${1}[[:space:]]{0,}=" \
         "${NET_CONF}" \
         |wc -l \
         |awk '{print$1}'
   )"
   if test ${TMP_COUNT} -gt 1;then
      return 1
   fi
   TMP_STR="$(
      egrep \
         -i \
         "^[[:space:]]{0,}${1}[[:space:]]{0,}=" \
         "${NET_CONF}" \
         |sed \
            -e "s/^[[:space:]]\{0,\}${1}[[:space:]]\{0,\}=[[:space:]]\{0,\}//g" \
            -e "s/[[:space:]]\{0,\}$//g" \
            -e "s/^[[:space:]]\{0,\}$//g"
   )"
   if test -z "${TMP_STR}";then
      echo "${2}"
   else
      echo "${TMP_STR}"
   fi |tr "${3:-0}" "${4:-0}"
}


config_verify()
{
   # quiet option
   case "x${NET_QUIET}" in
      x)    NET_QUIET="no"   ;;
      xno)  NET_QUIET="no"   ;;
      xyes) NET_QUIET="yes"  ;;
      *)    echo "invalid value for option 'quiet'" |$LOGGER;
            return 1;
            ;;
   esac

   # verbose option
   case "x${NET_VERBOSE}" in
      x)    NET_VERBOSE="no"  ;;
      xno)  NET_VERBOSE="no"  ;;
      xyes) NET_VERBOSE="yes" ;;
      *)    echo "invalid value for option 'verbose'" |$LOGGER;
            return 1;
            ;;
   esac

   return 0
}


do_hook()
{
   HOOK_TARGET="${1}"
   HOOK_TYPE="${2}"
   HOOK_ORDER="${3}"

   # run pre-hooks
   for HOOK_LEVEL in ${HOOK_ORDER};do
      case "${HOOK_LEVEL}" in
         apps)    do_hook_apps "${HOOK_TARGET}" "${HOOK_TYPE}" ;;
         builtin) ;;
         global)  do_hook_run "${HOOK_TARGET}" "${HOOK_TYPE}" "${HOOK_LEVEL}" ;;
         cluster) do_hook_run "${HOOK_TARGET}" "${HOOK_TYPE}" "${HOOK_LEVEL}" ;;
         local)   do_hook_run "${HOOK_TARGET}" "${HOOK_TYPE}" "${HOOK_LEVEL}" ;;
         none)    ;;
         *)       echo "Unknown ${HOOK_TYPE} order \"${NET_LEVEL}\""; return 1; ;;
      esac
   done

   return 0;
}


do_hook_apps()
{
   HOOK_TARGET="${1}"
   HOOK_TYPE="${2}"

   for TMP_APP in $(app_list); do
      do_hook_run "${HOOK_TARGET}" "${HOOK_TYPE}" apps "${TMP_APP}"
   done

   return 0;
}


do_hook_run()
{
   HOOK_TARGET="${1}"
   HOOK_TYPE="${2}"
   HOOK_LEVEL="${3}"
   HOOK_APP="${4}"

   case "${HOOK_LEVEL}" in
      'apps')    HOOK_LEVEL_DIR="${NET_DIR}/apps.d/${HOOK_APP}";;
      'global')  HOOK_LEVEL_DIR="${NET_DIR}/global.d";;
      'cluster') HOOK_LEVEL_DIR="${NET_DIR}/cluster.d";;
      'local')   HOOK_LEVEL_DIR="${NET_DIR}";;
      *) return 0;;
   esac

   case "${HOOK_TYPE}" in
      'pre-hook')  HOOK_SCRIPT="${HOOK_LEVEL_DIR}/pre-hook";;
      'post-hook') HOOK_SCRIPT="${HOOK_LEVEL_DIR}/post-hook";;
      *) return 0;;
   esac

   if test ! -x "${HOOK_SCRIPT}";then
      return 0;
   fi

   if test "${NET_QUIET}" != "xyes";then
      if test ! -z "${HOOK_APP}"; then
         HOOK_LEVEL="${HOOK_LEVEL}/${HOOK_APP}"
      fi
      echo "running ${HOOK_LEVEL} ${HOOK_TYPE} ${HOOK_TARGET} ..."
   fi

   ${HOOK_SCRIPT} ${HOOK_TARGET}; return $?
}


do_restart()
{
   do_stop || return 1;
   sleep 2;
   do_start || return 1;

   return 0;
}


do_start()
{
   # run network
   for LEVEL in ${NET_ORDER_UP};do
      case "${LEVEL}" in
         apps)    for FILE in $( app_findfile net-up ); do
                     run_net "${FILE}" "starting app network (App: $(app_name ${FILE})) ..."
                  done
                  ;;
         builtin) do_start_builtin ;;
         global)  run_net "${NET_DIR}/global.d/net-up"  "starting global network ..." ;;
         cluster) run_net "${NET_DIR}/cluster.d/net-up" "starting cluster network ..." ;;
         local)   run_net "${NET_DIR}/net-up"           "starting local network ..." ;;
         none)    ;;
         *)       echo "Unknown network up order \"${LEVEL}\"" ;;
      esac
   done

   return 0;
}


do_start_builtin()
{
   echo "starting builtin network ..."

   # Load Kernel Modules
   echo "loading modules..."
   /sbin/modprobe ipv6    > /dev/null 2>&1
   /sbin/modprobe 8021q   > /dev/null 2>&1

   # Interface: lo
   print_up "lo"
   /usr/sbin/ip link set lo up              > /dev/null 2>&1
   /usr/sbin/ip addr add 127.0.0.1/8 dev lo > /dev/null 2>&1
   /usr/sbin/ip addr add ::1         dev lo > /dev/null 2>&1

   return 0;
}


do_stop()
{
   # run network
   for LEVEL in ${NET_ORDER_DOWN};do
      case "${LEVEL}" in
         apps)    for FILE in $( app_findfile net-down ); do
                     run_net "${FILE}" "stopping app network (App: $(app_name ${FILE})) ..."
                  done
                  ;;
         builtin) do_stop_builtin ;;
         global)  run_net "${NET_DIR}/global.d/net-down"  "stopping global network ..." ;;
         cluster) run_net "${NET_DIR}/cluster.d/net-down" "stopping cluster network ..." ;;
         local)   run_net "${NET_DIR}/net-down"           "stopping local network ..." ;;
         none)    ;;
         *)       echo "Unknown network up order \"${LEVEL}\"" ;;
      esac
   done

   return 0;
}


do_stop_builtin()
{
   # disabling forwarding
   echo "disabling forwarding..."
   echo 0 > /proc/sys/net/ipv4/ip_forward
   echo 0 >  /proc/sys/net/ipv6/conf/all/forwarding


   # Routes
   echo "removing routes..."
   /usr/sbin/ip -6 route flush all
   /usr/sbin/ip -4 route flush all


   # delete interfaces
   for NETTYPE in vlan ipvlan macvlan macvtap dummy veth bond;do
      for NETDEV in $(do_stop_builtin_list ${NETTYPE});do
         print_down "${NETDEV}"
         /usr/sbin/ip -4 addr flush dev ${NETDEV}
         /usr/sbin/ip -6 addr flush dev ${NETDEV}
         /usr/sbin/ip link set ${NETDEV} down > /dev/null
         /usr/sbin/ip link del dev ${NETDEV} type ${NETTYPE}
      done
   done


   # delete vrfs
   for NETDEV in $(do_stop_builtin_list vrf);do
      print_down "${NETDEV}"
      TABLE=$(/usr/sbin/ip -d link show ${NETDEV} type vrf |grep 'vrf table' |awk '{print$3}')
      /usr/sbin/ip link del dev ${NETDEV} type vrf
      /usr/sbin/ip route flush table ${TABLE}
   done


   # delete tunnels
   for NETDEV in $(/usr/sbin/ip tunnel show |cut -d: -f1);do
      print_down "${NETDEV}"
      /usr/sbin/ip -4 addr flush dev ${NETDEV}
      /usr/sbin/ip -6 addr flush dev ${NETDEV}
      /usr/sbin/ip    link set   dev ${NETDEV} down
      /usr/sbin/ip    tun  del       ${NETDEV}
   done


   # down all network interfaces
   for NETDEV in $(cut -d: -f1 /proc/net/dev |egrep  'eth' |sort) lo;do
      print_down "${NETDEV}"
      /usr/sbin/ip -4 addr flush dev ${NETDEV}
      /usr/sbin/ip -6 addr flush dev ${NETDEV}
      /usr/sbin/ip    link set   dev ${NETDEV} down
   done


   # Interface: lo
   print_up "lo"
   /usr/sbin/ip link set lo up              > /dev/null 2>&1
   /usr/sbin/ip addr add 127.0.0.1/8 dev lo > /dev/null 2>&1
   /usr/sbin/ip addr add ::1         dev lo > /dev/null 2>&1


   # removes modules
   echo "unloading modules..."
   /sbin/modprobe -r 8021q   > /dev/null 2>&1
   /sbin/modprobe -r bonding > /dev/null 2>&1
   /sbin/modprobe -r sit     > /dev/null 2>&1

   return 0;
}


do_stop_builtin_list()
{
   test -z "${1}" && return 0
   TYPE="${1}"
   /usr/sbin/ip -br link show type ${TYPE} \
      |awk '{print$1}' \
      |cut -d@ -f1 \
      |sort -n
}


do_sync()
{
   for LEVEL in ${NET_ORDER_SYNC}; do
      case "${LEVEL}" in
         apps)    do_sync_dir "${NET_DIR}/apps.d"    "syncing apps root files %s ..." ;
                  for APP in $( app_list ); do
                     do_sync_dir "${NET_DIR}/apps.d/${APP}" "syncing app files %s (App: ${APP}) ...";
                  done;
                  ;;
         global)  do_sync_dir "${NET_DIR}/global.d"  "syncing global files %s ..." ;;
         cluster) do_sync_dir "${NET_DIR}/cluster.d" "syncing cluster files %s ..." ;;
         builtin) ;;
         local)   ;;
         none)    ;;
         *)       echo "Unknown sync priority \"${PRIORITY}\"" ;;
      esac
   done

   export NET_SYNC_DID_UPDATE

   return 0;
}


do_sync_dir()
{
   SYNC_DIR="${1}"
   SYNC_DESC="${2}"

   if test -e "${SYNC_DIR}/.sync_disabled"; then
      printf "${SYNC_DESC}\n" "disabled";
      return 0;
   fi

   for PRIORITY in ${NET_SYNC_PRIORITY}; do
      case "${PRIORITY}" in
         git)     do_sync_method_git    && return 0;;
         rsync)   do_sync_method_rsync  && return 0;;
         script)  do_sync_method_script && return 0;;
         *)       echo "unknown: ${SYNC_DESC}"; ;;
      esac
   done

   return 0;
}


do_sync_method_git()
{
   if test ! -d "${SYNC_DIR}/.git" && test ! -f "${SYNC_DIR}/.git"; then
      return 1;
   fi

   printf "${SYNC_DESC}\n" "via git";

   # determine if the timeout util is available
   TIMEOUT_UTIL="$(which timeout 2> /dev/null)"
   if test ! -z "${TIMEOUT_UTIL}";then
      TIMEOUT_UTIL="${TIMEOUT_UTIL} ${NET_SYNC_TIMEOUT}"
   fi

   # run git
   (
      cd ${SYNC_DIR} || return 1;

      URL="$(git remote get-url origin 2>/dev/null)"
      if test -z "${URL}"; then
         echo "missing git remote 'origin', not syncing"
         return 0;
      fi

      BRANCH="$(git branch |grep '^* ' |awk '{print$2}')"
      if test -z "${BRANCH}"; then
         echo "unable to determine git branch, not syncing"
         return 0;
      fi

      # fetch remote updates and check for differences
      ${TIMEOUT_UTIL} git fetch origin || return 0;
      git diff \
         --exit-code \
         origin/${BRANCH} \
         > /dev/null \
         2> /dev/null \
         || NET_SYNC_DID_UPDATE=yes;

      # merge changes
      git checkout .                                  || return 0;
      git merge origin/${BRANCH}                      || return 0;
      git submodule update --init --recursive --merge || return 0;
   )

   return 0;
}


do_sync_method_rsync()
{
   if test ! -r "${SYNC_DIR}/.rsync"; then
      return 1;
   fi

   printf "${SYNC_DESC}\n" "via rsync";

   # determine if the timeout util is available
   TIMEOUT_UTIL="$(which timeout 2> /dev/null)"
   if test ! -z "${TIMEOUT_UTIL}";then
      TIMEOUT_UTIL="${TIMEOUT_UTIL} ${NET_SYNC_TIMEOUT}"
   fi

   RSYNC_URL="$(cat "${SYNC_DIR}/.rsync")"
   if test -z "${RSYNC_URL}"; then
      echo "the .rsync file is empty, not syncing"
      return 0;
   fi

   # run rsync
   RSYNC_ARGS="${TIMEOUT_UTIL} rsync -aim --delete --exclude=.rsync"
   RSYNC_OUTPUT="$(${RSYNC_ARGS} $(RSYNC_URL) ${SYNC_DIR})"
   if test ! -z "${RSYNC_OUTPUT}"; then
      NET_SYNC_DID_UPDATE=yes;
   fi;

   return 0;
}


do_sync_method_script()
{
   if test ! -x "${SYNC_DIR}/sync"; then
      return 1
   fi

   printf "${SYNC_DESC}\n" "via script";
   ${SYNC_DIR}/sync
   case $? in
      0) return 0;;
      1) return 1;;
      2) return 2; NET_SYNC_DID_UPDATE=yes;;
      *) return 1;;
   esac
   return 0;
}


do_version()
{
   echo "Bindle Binaries Linux Networking ${PACKAGE_VERSION} (bbfw)"
}


print_down() { /usr/bin/printf "setting %-13s%s down\n" "${1}"; };
print_up()   { /usr/bin/printf "setting %-13s%s up\n"   "${1}"; };


run_net()
{
   FILE="${1}"
   DESC="${2}"

   if test ! -f "${FILE}";then
      return 0;
   fi

   if test ! -z "${DESC}" && test "${NET_QUIET}" != "xno";then
      echo "${DESC}"
   fi

   . "${FILE}"
}


target_checkconfig()
{
   config_check
   if test $? -eq 0; then
      echo "config ok"
   fi

   return 0;
}


# Function to restart the network:
target_restart()
{
   # show version
   do_version

   # minimal config check
   config_verify || return 1;

   # run pre-hooks
   do_hook restart pre-hook "${NET_ORDER_PRE}" || return 1;

   # run network
   do_restart || return 1;

   # run post-hooks
   do_hook restart post-hook "${NET_ORDER_POST}" || return 1;

   return 0
}


target_show()
{
   do_version;

   echo "addresses:";
   {
      ip -br addr
      if test $? -ne 0; then
         ip addr
      fi
      if test $? -ne 0; then
         ifconfig -a |egrep '^[^[:space:]]|^[[:space:]]{1,}inet6{0,1}[[:space:]]'
      fi
   } 2> /dev/null | sed -e 's/^/   /g'
   echo ""

   echo "IPv4 routes:"
   {
   ip -4 route
   if test $? -ne 0; then
      netstat -rn -f inet
   fi
   } 2> /dev/null | sed -e 's/^/   /g'
   echo ""

   echo "IPv6 routes:"
   {
      ip -6 route
      if test $? -ne 0; then
         netstat -rn -f inet6
      fi
   } 2> /dev/null | sed -e 's/^/   /g'
   echo ""

   echo "forwarding:"
   case "x$(cat /proc/sys/net/ipv4/ip_forward 2> /dev/null)" in
      x0) echo "   IPv4 Forwarding: enabled";;
      x1) echo "   IPv4 Forwarding: disabled";;
      *)  echo "   IPv4 Forwarding: unknown";;
   esac
   case "x$(cat /proc/sys/net/ipv6/conf/all/forwarding 2> /dev/null)" in
      x0) echo "   IPv6 Forwarding: enabled";;
      x1) echo "   IPv6 Forwarding: disabled";;
      *)  echo "   IPv6 Forwarding: unknown";;
   esac
   echo ""

   return 0;
}


target_showconfig()
{
   do_version
   echo "Active Configuration:"
   echo "   configuration     ${NET_CONF}"
   echo "   network_dir       ${NET_DIR}"
   echo "   quiet             ${NET_QUIET}"
   echo "   verbose           ${NET_VERBOSE}"
   echo "   order_prehook     ${NET_ORDER_PRE}"
   echo "   order_posthook    ${NET_ORDER_POST}"
   echo "   order_up          ${NET_ORDER_UP}"
   echo "   order_down        ${NET_ORDER_DOWN}"
   echo "   order_sync        ${NET_ORDER_SYNC}"
   echo "   sync_priority     ${NET_SYNC_PRIORITY}"
   echo "   sync_restarts     ${NET_SYNC_RESTARTS}"
   echo "   sync_timeout      ${NET_SYNC_TIMEOUT}"
   echo ""
   config_check > /dev/null 2> /dev/null
   if test $? -ne 0; then
      echo "Configuration Errors:"
      config_check 2>&1 |sed -e 's/^/   /g'
      echo ""
      return 1;
   fi
   return 0;
}


# Function to start the network:
target_start()
{
   # show version
   do_version

   # minimal config check
   config_verify || return 1;

   # run pre-hooks
   do_hook start pre-hook "${NET_ORDER_PRE}" || return 1;

   # run network
   do_start || return 1;

   # run post-hooks
   do_hook start post-hook "${NET_ORDER_POST}" || return 1;

   return 0
}


# Function to stop the network:
target_stop()
{
   # show version
   do_version

   # minimal config check
   config_verify || return 1;

   # run pre-hooks
   do_hook stop pre-hook "${NET_ORDER_PRE}" || return 1;

   # run network
   do_stop || return 1;

   # run post-hooks
   do_hook stop post-hook "${NET_ORDER_POST}" || return 1;

   return 0
}


# Function to synchronize config files
target_sync()
{
   # show version
   do_version

   # minimal config check
   config_verify || return 1;

   # run pre-hooks
   do_hook sync pre-hook "${NET_ORDER_PRE}" || return 1;

   # sync files
   do_sync || return 1;

   # run post-hooks
   do_hook sync post-hook "${NET_ORDER_POST}" || return 1;

   # determines if network should restart
   if test "${NET_SYNC_RESTARTS}" != "yes"; then
      return 0;
   fi
   if test "${NET_SYNC_DID_UPDATE}" != "yes"; then
      return 0;
   fi

   # run pre-hooks
   do_hook restart pre-hook "${NET_ORDER_PRE}" || return 1;

   # run network
   do_restart || return 1;

   # run post-hooks
   do_hook restart post-hook "${NET_ORDER_POST}" || return 1;

   return 0
}


target_usage()
{
   echo "Usage: ${PROGRAM_NAME} [ start | stop | restart | show | showconfig | checkconfig ]"
   echo "       ${PROGRAM_NAME} [ -h | --help ]"
   echo "       ${PROGRAM_NAME} [ -v | --version ]"
   echo ""
   return 0;
}


target_version()
{
   do_version
   return 0;
}


############
### MAIN ###
############

# sets options from configuration file
NET_DIR="$(            config_option network_dir       "${NET_DIR}" )"
NET_QUIET="$(          config_option quiet             "${NET_QUIET}"           A-Z a-z )"
NET_VERBOSE="$(        config_option verbose           "${NET_VERBOSE}"         A-Z a-z )"
NET_ORDER_PRE="$(      config_option order_prehook     "${NET_ORDER_PRE}"       A-Z a-z )"
NET_ORDER_POST="$(     config_option order_posthook    "${NET_ORDER_POST}"      A-Z a-z )"
NET_ORDER_UP="$(       config_option order_up          "${NET_ORDER_UP}"        A-Z a-z )"
NET_ORDER_DOWN="$(     config_option order_down        "${NET_ORDER_DOWN}"      A-Z a-z )"
NET_ORDER_SYNC="$(     config_option order_sync        "${NET_ORDER_SYNC}"      A-Z a-z )"
NET_SYNC_PRIORITY="$(  config_option sync_priority     "${NET_SYNC_PRIORITY}"   A-Z a-z )"
NET_SYNC_RESTARTS="$(  config_option sync_restarts     "${NET_SYNC_RESTARTS}"   A-Z a-z )"
NET_SYNC_TIMEOUT="$(   config_option sync_timeout      "${NET_SYNC_TIMEOUT}"    A-Z a-z )"


case "$1" in
   -h|--help)     target_usage         ;;
   -v|--version)  target_version       ;;
   'checkconfig') target_checkconfig   || exit 1 ;;
   'start')       target_start         2>&1 | $LOGGER ;;
   'stop')        target_stop          2>&1 | $LOGGER ;;
   'show')        target_show          ;;
   'showconfig')  target_showconfig    || exit 1 ;;
   'sync')        target_sync          2>&1  | $LOGGER ;;
   'restart')     target_restart       2>&1  | $LOGGER ;;

   *) # The default is to bring up all configured interfaces:
      target_usage | $LOGGER 1>&2
      exit 1;
   ;;
esac


# End of /etc/rc.d/rc.inet1
